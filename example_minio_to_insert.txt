ctx := context.Background()

    // MinIO client setup
    minioClient, err := minio.New("minio-server-url", &minio.Options{
        Creds:  credentials.NewStaticV4("your-access-key", "your-secret-key", ""),
        Secure: false, // Set to true if https is enabled
    })
    if err != nil {
        log.Fatalln(err)
    }

    // Getting the list of objects in the bucket
    objectCh := minioClient.ListObjects(ctx, "your-bucket-name", minio.ListObjectsOptions{
        Recursive: true,
    })

    var oldestFile string
    oldestTime := time.Now()

    // Identify the oldest CSV file
    for object := range objectCh {
        if object.Err != nil {
            log.Fatalln(object.Err)
        }
        if strings.HasSuffix(object.Key, ".csv") && object.LastModified.Before(oldestTime) {
            oldestFile = object.Key
            oldestTime = object.LastModified
        }
    }

    // Download the oldest CSV file
    object, err := minioClient.GetObject(ctx, "your-bucket-name", oldestFile, minio.GetObjectOptions{})
    if err != nil {
        log.Fatalln(err)
    }
    defer object.Close()

    // CSV reading setup
    csvReader := csv.NewReader(object)
    var columnData []string
    headerRead := false

    // Read the CSV file
    for {
        record, err := csvReader.Read()
        if err == io.EOF {
            break
        }
        if err != nil {
            log.Fatalln(err)
        }
        if !headerRead {
            headerRead = true
            continue
        }
        // Assuming data is in the first column
        columnData = append(columnData, record[0])
    }

    // Database connection setup
    db, err := sql.Open("mysql", "user:password@/dbname")
    if err != nil {
        log.Fatal(err)
    }
    defer db.Close()

    // Insert data into the database
    for _, value := range columnData {
        _, err = db.Exec("INSERT INTO your_table (column_name) VALUES (?)", value)
        if err != nil {
            log.Fatal(err)
        }
    }

    log.Println("Data insertion complete.")
}